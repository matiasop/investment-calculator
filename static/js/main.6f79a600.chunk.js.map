{"version":3,"sources":["logic.js","stacked.js","pie.js","legend.js","App.js","index.js"],"names":["investment_calculator","initial","years","r","contribution","monthly_r","Math","pow","current_date","Date","investment","setMonth","getMonth","year","month","total_months","i","push","end_principal","end_balance","Stacked","data","Number","keys","x","d","date","xScale","scaleTime","domain","length","yScale","scaleLinear","zScale","scaleOrdinal","range","height","margin","tooltipStyles","defaultStyles","backgroundColor","color","width","padding","useTooltip","tooltipOpen","tooltipLeft","tooltipTop","tooltipData","showTooltip","hideTooltip","updateTooltip","getDate","getDataValue","start_principal","interest","start_balance","bisectDate","bisector","left","xMax","yMax","style","TooltipWithBounds","top","random","Group","AreaStack","stroke","strokeWidth","y0","y1","onMouseMove","event","localPoint","x0","invert","index","d0","d1","valueOf","information","toFixed","onMouseLeave","Line","from","widthTT","y","to","strokeDasharray","AxisLeft","scale","AxisBottom","PieChart","sum_interest","forEach","e","final_money","name","value","perecentages","getNameFrequencyColor","map","Pie","pieValue","outerRadius","pieSortValues","a","b","pie","arcs","arc","path","centroid","centroidX","centroidY","hasSpaceForLabel","endAngle","startAngle","arcPath","arcFill","fill","onMouseEnter","toolText","coords","target","ownerSVGElement","dy","fontSize","textAnchor","pointerEvents","ordinalColorScale","MyChart","labelFormat","label","labels","display","flexDirection","LegendItem","LegendLabel","align","text","calculate_interest","App","useState","setInitial","setYears","setR","setContribution","calculator_info","className","type","onChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f79a600.chunk.js","sourcesContent":["const investment_calculator = (initial, years, r, contribution) => {\n  // initial: initial amount of money\n  // years: years in which compounding interest will be calculated\n  // r: yearly interest rate (calculated every month)\n  // contribution: amount to be contributed monthly\n\n  const monthly_r = Math.pow(1 + r, 1 / 12) - 1;\n  let current_date = new Date();\n\n  const investment = [\n    {\n      'year': 1,\n      'month': 1,\n      'date': new Date(current_date.setMonth(current_date.getMonth() + 1)),\n      'start_principal': initial,\n      'start_balance': initial,\n      'interest': initial * monthly_r,\n      'end_principal': initial + contribution,\n      'end_balance': initial + initial * monthly_r + contribution\n    }\n  ]\n\n  let year = 1;\n  let month = 1;\n  const total_months = years * 12;\n\n  for (let i = 0; i < total_months; i++) {\n    if (i == 0) {\n      continue\n    }\n    month += 1;\n    if (i % 12 == 0) {\n      year += 1;\n      month = 1;\n    }\n    investment.push({\n      'year': year,\n      'month': month,\n      'date': new Date(current_date.setMonth(current_date.getMonth() + 1)),\n      'start_principal': investment[i - 1].end_principal,\n      'start_balance': investment[i - 1].end_balance,\n      'interest': investment[i - 1].end_balance * monthly_r,\n      'end_principal': investment[i - 1].end_principal + contribution,\n      'end_balance': investment[i - 1].end_balance\n        + investment[i - 1].end_balance * monthly_r + contribution\n    });\n  }\n  return investment;\n}\n\nexport default investment_calculator;","import React, { useState, useEffect } from \"react\";\nimport { Group } from \"@visx/group\";\nimport { AreaStack, Line } from \"@visx/shape\";\nimport { AxisLeft, AxisBottom } from \"@visx/axis\";\nimport { scaleTime, scaleLinear, scaleOrdinal } from \"@visx/scale\";\nimport { TooltipWithBounds, useTooltip, defaultStyles } from \"@visx/tooltip\";\nimport { bisector } from 'd3-array';\nimport { localPoint } from '@visx/event';\nimport investment_calculator from './logic';\n\nconst Stacked = ({ initial, years, r, contribution }) => {\n\n  // Data and keys\n  let data = investment_calculator(Number(initial), Number(years), Number(r), Number(contribution));\n  const keys = [\"start_principal\", \"interest\", \"start_balance\"];\n  // Data accesor\n  const x = d => new Date(d.date);\n\n  // Scales\n  const xScale = scaleTime({\n    domain: [x(data[0]), x(data[data.length - 1])]\n  });\n  const yScale = scaleLinear({\n    // domain: [0, 160]\n    domain: [0, data[data.length - 1].end_balance * 2]\n  });\n  const zScale = scaleOrdinal({\n    range: [\"#3182bd\", \"#6baed6\", \"#9ecae1\"],\n    // range: [\"green\", \"orange\", \"red\"],\n    domain: keys\n  });\n\n  // Dimensions\n  const width = 600;\n  const height = 450;\n  const margin = { top: 10, bottom: 40, left: 40, right: 10 };\n  const widthTT = 130;\n  const heightTT = 50;\n  const paddingTT = 12;\n\n  // ToolTip\n  const tooltipStyles = {\n    ...defaultStyles,\n    backgroundColor: \"rgba(53,71,125,0.8)\",\n    color: \"white\",\n    width: widthTT,\n    height: heightTT,\n    padding: paddingTT,\n  };\n\n  const {\n    showTooltip,\n    hideTooltip,\n    updateTooltip,\n    tooltipOpen,\n    tooltipData,\n    tooltipLeft = 0,\n    tooltipTop = 0\n  } = useTooltip({\n    // Initial tooltip state\n    tooltipOpen: true,\n    // tooltipLeft: width / 3,\n    // tooltipTop: height / 3,\n    tooltipLeft: -1000,\n    tooltipTop: -1000,\n    tooltipData: \"Move me with your mouse\"\n  });\n  //  Accessors\n  const getDate = (d) => new Date(d.date);\n  // const getDataValue = (d) => d.Group1 + d.Group2 + d.Group3;\n  const getDataValue = (d) => d.start_principal + d.interest + d.start_balance;\n  const bisectDate = bisector(d => new Date(d.date)).left;\n\n  // Scales\n  const xMax = width - margin.left - margin.right;\n  const yMax = height - margin.top - margin.bottom;\n\n  xScale.range([0, xMax]);\n  yScale.range([yMax, 0]);\n\n  return (\n    <div\n      style={{ width, height }}\n    >\n      <TooltipWithBounds\n        key={Math.random()} // needed for bounds to update correctly\n        left={tooltipLeft}\n        top={tooltipTop}\n        style={tooltipStyles}\n      >\n        {tooltipData}\n      </TooltipWithBounds>\n      <svg width={width} height={height}>\n        <Group top={margin.top} left={margin.left}>\n          <AreaStack\n            keys={keys}\n            data={data}\n            stroke=\"white\"\n            strokeWidth={2}\n            x={d => xScale(x(d.data))}\n            y0={d => {\n              return yScale(d[0])\n            }}\n            // y1={d => yScale(d[0] + d[1])}\n            y1={d => yScale(d[1])}\n            // color={(key, index) => zScale(keys[index])}\n            color={d => zScale(d)}\n            // Move the ToolTip\n            onMouseMove={(event) => {\n              const { x } = localPoint(event) || { x: 0 };\n              const x0 = xScale.invert(x);\n              const index = bisectDate(data, x0, 1);\n              const d0 = data[index - 1];\n              const d1 = data[index];\n              let d = d0;\n              if (d1 && getDate(d1)) {\n                d = x0.valueOf() - getDate(d0).valueOf() > getDate(d1).valueOf() - x0.valueOf() ? d1 : d0;\n              }\n\n              // info on the tooltip\n              // let information = `G1: ${d.Group1} \\n G2: ${d.Group2} \\n G3: ${d.Group3} \\n Sum: ${d.Group1 + d.Group2 + d.Group3}`;\n              // let information = `G1: ${d.start_principal} \\n G2: ${d.interest} \\n G3: ${d.start_balance} \\n Sum: ${d.start_principal + d.interest + d.start_balance}`;\n              let information = `Principal: ${d.start_principal.toFixed(2)} \\n Interest: ${d.interest.toFixed(2)} \\n Balance: ${d.start_balance.toFixed(2)}`;\n              showTooltip({ tooltipLeft: x, tooltipTop: yScale(getDataValue(d)), tooltipData: information, tooltipOpen: true });\n            }}\n            // Hide the toolTip\n            onMouseLeave={(event) => {\n              showTooltip({ tooltipLeft: -1000, tooltipTop: -1000, tooltipData: \"\", tooltipOpen: true })\n            }}\n          />\n          <Line\n            from={{ x: tooltipLeft - widthTT / 2, y: margin.top }}\n            to={{ x: tooltipLeft - widthTT / 2, y: margin.top + height }}\n            // stroke={'#75daad'}\n            stroke={'orange'}\n            strokeWidth={2}\n            // pointerEvents=\"none\"\n            strokeDasharray=\"5,2\"\n          />\n          <AxisLeft scale={yScale} />\n          <AxisBottom top={yMax} scale={xScale} />\n        </Group>\n      </svg>\n    </div>\n  );\n};\n\nexport default Stacked;\n","import React, { useState, useEffect } from \"react\";\nimport { Pie } from \"@visx/shape\";\nimport { Group } from \"@visx/group\";\nimport { scaleOrdinal } from \"@visx/scale\";\nimport { TooltipWithBounds, useTooltip, defaultStyles } from \"@visx/tooltip\";\nimport { localPoint } from '@visx/event';\nimport investment_calculator from './logic';\n\nfunction PieChart({ initial, years, r, contribution }) {\n  let investment = investment_calculator(Number(initial), Number(years), Number(r), Number(contribution));\n\n  // find the total amount gained by interests\n  let sum_interest = 0;\n  investment.forEach((e) => {\n    sum_interest += e.interest;\n  });\n\n  const final_money = initial + sum_interest + investment[investment.length - 1].end_principal;\n\n  const name_initial = `${(initial / final_money).toFixed(1)}`;\n  const name_interest = `${(sum_interest / final_money).toFixed(1)}`;\n  const name_contributions = `${(investment[investment.length - 1].end_principal / final_money).toFixed(1)}`;\n  const data = [\n    { name: 'Initial', value: initial },\n    { name: 'Interest', value: sum_interest },\n    { name: 'Contributions', value: investment[investment.length - 1].end_principal }\n  ]\n  const perecentages = {\n    'Initial': initial / final_money,\n    'Interest': sum_interest / final_money,\n    'Contributions': investment[investment.length - 1].end_principal / final_money\n  }\n  const value = (d) => d.value;\n  const getNameFrequencyColor = scaleOrdinal({\n    domain: data.map((d) => d.name),\n    // range: [\n    //   \"rgba(93,30,91,1)\",\n    //   \"rgba(93,30,91,0.8)\",\n    //   \"rgba(93,30,91,0.6)\",\n    //   \"rgba(93,30,91,0.4)\"\n    // ]\n    range: [\"#6baed6\", \"#9ecae1\", \"#3182bd\"],\n  });\n\n  const pieSortValues = (a, b) => b - a;\n  const width = 600;\n  const height = 400;\n  const radius = 100;\n  const top = 300;\n  const left = 200\n\n  const tooltipStyles = {\n    ...defaultStyles,\n    backgroundColor: \"rgba(53,71,125,0.8)\",\n    color: \"white\",\n    width: 140,\n    height: 15,\n    padding: 12\n  };\n\n  const {\n    showTooltip,\n    hideTooltip,\n    updateTooltip,\n    tooltipOpen,\n    tooltipData,\n    tooltipLeft = 0,\n    tooltipTop = 0\n  } = useTooltip({\n    // Initial tooltip state\n    tooltipOpen: false,\n    // tooltipLeft: width / 3,\n    // tooltipTop: height / 3,\n    tooltipLeft: -1000,\n    tooltipTop: -1000,\n    tooltipData: \"Move me with your mouse\"\n  });\n\n  return (\n    <>\n      <div\n        // ref={containerRef}\n        // className=\"tooltip-example\"\n        style={{ width, height }}\n      // onPointerMove={handlePointerMove}\n      >\n        <>\n          <TooltipWithBounds\n            key={Math.random()} // needed for bounds to update correctly\n            left={tooltipLeft + 900}\n            top={tooltipTop}\n            style={tooltipStyles}\n          >\n            {tooltipData}\n          </TooltipWithBounds>\n        </>\n\n        <svg width={width} height={height}>\n          <Group top={top} left={left}>\n            <Pie\n              data={data}\n              pieValue={value}\n              outerRadius={radius}\n              pieSortValues={pieSortValues}\n            >\n              {(pie) => {\n                return pie.arcs.map((arc, index) => {\n                  const { name } = arc.data;\n                  const [centroidX, centroidY] = pie.path.centroid(arc);\n                  const hasSpaceForLabel = arc.endAngle - arc.startAngle >= 0.1;\n                  const arcPath = pie.path(arc);\n                  const arcFill = getNameFrequencyColor(name);\n                  return (\n                    <g key={`arc-${name}-${index}`}>\n                      <path\n                        d={arcPath}\n                        fill={arcFill}\n                        onMouseEnter={(event) => {\n                          const toolText = `${name} \\n ${(perecentages[name] * 100).toFixed(2)}%`;\n                          const coords = localPoint(event.target.ownerSVGElement, event);\n                          showTooltip({ tooltipLeft: coords.x - 200, tooltipTop: coords.y, tooltipData: toolText, tooltipOpen: false });\n                          // showTooltip({ tooltipLeft: centroidX + width / 3, tooltipTop: centroidY + height, tooltipData: toolText, tooltipOpen: false });\n                        }}\n                        onMouseLeave={(event) => {\n                          // hideTooltip();\n                          // move the tooltip far away so no one can see it\n                          updateTooltip({ tooltipLeft: -1000, tooltipTop: -1000, tooltipData: \"\", tooltipOpen: true });\n                        }}\n                      />\n                      {hasSpaceForLabel && (\n                        <text\n                          x={centroidX}\n                          y={centroidY}\n                          dy=\".33em\"\n                          fill=\"#ffffff\"\n                          fontSize={22}\n                          textAnchor=\"middle\"\n                          pointerEvents=\"none\"\n                        >\n                          {/* Comment the line below so the name won't be displayed */}\n                          {/* {arc.data.name} */}\n                        </text>\n                      )}\n                    </g>\n                  );\n                });\n              }}\n            </Pie>\n          </Group>\n        </svg>\n      </div>\n    </>\n  );\n}\n\nexport default PieChart;","import {\n  Legend,\n  LegendLinear,\n  LegendQuantile,\n  LegendOrdinal,\n  LegendSize,\n  LegendThreshold,\n  LegendItem,\n  LegendLabel,\n} from '@visx/legend';\nimport { scaleOrdinal } from '@visx/scale';\n\nconst legendGlyphSize = 15;\n\nconst ordinalColorScale = scaleOrdinal({\n  domain: ['Initial Amount', 'Interest Gained', 'Monthly Contributions'],\n  range: [\"#6baed6\", \"#9ecae1\", \"#3182bd\"],\n});\n\nfunction MyChart() {\n  return (\n    <div>\n      <LegendOrdinal scale={ordinalColorScale} labelFormat={label => `${label}`}>\n        {labels => (\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\n            {labels.map((label, i) => (\n              <LegendItem\n                key={`legend-quantile-${i}`}\n                margin=\"0 5px\"\n              // onClick={() => {\n              //   if (events) alert(`clicked: ${JSON.stringify(label)}`);\n              // }}\n              >\n                <svg width={legendGlyphSize} height={legendGlyphSize}>\n                  <rect fill={label.value} width={legendGlyphSize} height={legendGlyphSize} />\n                </svg>\n                <LegendLabel align=\"left\" margin=\"0 0 0 4px\">\n                  {label.text}\n                </LegendLabel>\n              </LegendItem>\n            ))}\n          </div>\n        )}\n      </LegendOrdinal>\n    </div>\n  );\n}\n\nexport default MyChart;","import Stacked from './stacked';\nimport PieChart from './pie';\nimport MyChart from './legend';\nimport investment_calculator from './logic';\nimport React, { useState } from 'react';\n\nfunction calculate_interest(data) {\n  let sum_interest = 0;\n  data.forEach((e) => {\n    sum_interest += e.interest;\n  });\n  return sum_interest\n}\n\nfunction App() {\n  const [initial, setInitial] = useState(10000);\n  const [years, setYears] = useState(20);\n  const [r, setR] = useState(0.07);\n  const [contribution, setContribution] = useState(100);\n\n  const calculator_info = {\n    initial: initial,\n    years: years,\n    r: r,\n    contribution: contribution,\n  }\n\n  let data = investment_calculator(Number(initial), Number(years), Number(r), Number(contribution));\n\n  return (\n    <>\n      <h1 className=\"header\">Investment Calculator</h1>\n      <div className=\"App\">\n        <div className=\"graph-container\">\n          <Stacked className=\"stacked-chart\" {...calculator_info} />\n          <PieChart className=\"pie-chart\" {...calculator_info} />\n        </div>\n        <div className=\"pieLegend\">\n          <MyChart />\n        </div>\n      </div>\n\n      <div className=\"menu\">\n        <span className=\"menu-text\">Initial Amount</span>\n        <input className=\"menu-input\" value={initial} type=\"text\" onChange={(e) => setInitial(e.target.value)} />\n      </div>\n\n      <div className=\"menu\">\n        <span className=\"menu-text\">Years</span>\n        <input className=\"menu-input\" value={years} type=\"text\" onChange={(e) => setYears(e.target.value)} />\n      </div>\n\n      <div className=\"menu\">\n        <span className=\"menu-text\">Return on Investment</span>\n        <input className=\"menu-input\" value={r} type=\"text\" onChange={(e) => setR(e.target.value)} />\n      </div>\n\n      <div className=\"menu\">\n        <span className=\"menu-text\">Monthly Contribution</span>\n        <input className=\"menu-input\" value={contribution} type=\"text\" onChange={(e) => setContribution(e.target.value)} />\n      </div>\n\n      <div className=\"menu\">\n        <span className=\"menu-text results\">Results</span>\n      </div>\n\n      <div className=\"menu\">\n        <span className=\"menu-text results\">End Balance</span>\n        <span className=\"results\">{`$${(data[data.length - 1].end_balance).toFixed(2)}`}</span>\n      </div>\n\n      <div className=\"menu\">\n        <span className=\"menu-text\">Initial Amount</span>\n        <span>{`$${initial}`}</span>\n      </div>\n\n      <div className=\"menu\">\n        <span className=\"menu-text\">Total Contributions</span>\n        <span>{`$${(data[data.length - 1].end_principal)}`}</span>\n      </div>\n\n      <div className=\"menu\">\n        <span className=\"menu-text\">Total Interest</span>\n        <span>{`$${calculate_interest(data).toFixed(2)}`}</span>\n      </div>\n\n      <div className=\"footer\"></div>\n    </>\n  )\n}\n\nexport default App;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}