[{"/home/movalle/TODO/proyectos/investment-calculator/src/index.js":"1","/home/movalle/TODO/proyectos/investment-calculator/src/stacked.js":"2","/home/movalle/TODO/proyectos/investment-calculator/src/pie.js":"3","/home/movalle/TODO/proyectos/investment-calculator/src/logic.js":"4","/home/movalle/TODO/proyectos/investment-calculator/src/App.js":"5","/home/movalle/TODO/proyectos/investment-calculator/src/legend.js":"6"},{"size":231,"mtime":1609613445006,"results":"7","hashOfConfig":"8"},{"size":5301,"mtime":1609618771559,"results":"9","hashOfConfig":"8"},{"size":5528,"mtime":1609618833961,"results":"10","hashOfConfig":"8"},{"size":1538,"mtime":1609425766629,"results":"11","hashOfConfig":"8"},{"size":1110,"mtime":1609617143980,"results":"12","hashOfConfig":"8"},{"size":1341,"mtime":1609599031545,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"14as291",{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"19"},"/home/movalle/TODO/proyectos/investment-calculator/src/index.js",["30"],"/home/movalle/TODO/proyectos/investment-calculator/src/stacked.js",["31","32","33"],"import React, { useState, useEffect } from \"react\";\nimport { Group } from \"@visx/group\";\nimport { AreaStack, Line } from \"@visx/shape\";\nimport { AxisLeft, AxisBottom } from \"@visx/axis\";\nimport { scaleTime, scaleLinear, scaleOrdinal } from \"@visx/scale\";\nimport { TooltipWithBounds, useTooltip, defaultStyles } from \"@visx/tooltip\";\nimport { bisector } from 'd3-array';\nimport { localPoint } from '@visx/event';\nimport investment_calculator from './logic';\n\nconst Stacked = ({ initial, years, r, contribution }) => {\n  const [value, setValue] = useState(initial);\n  useEffect(() => { setValue(initial) }, [initial]);\n\n  // Data and keys\n  // let data = investment_calculator(initial, years, r, contribution);\n  let data = investment_calculator(value, years, r, contribution);\n  const keys = [\"start_principal\", \"interest\", \"start_balance\"];\n  // Data accesor\n  const x = d => new Date(d.date);\n\n  // Scales\n  const xScale = scaleTime({\n    domain: [x(data[0]), x(data[data.length - 1])]\n  });\n  const yScale = scaleLinear({\n    // domain: [0, 160]\n    domain: [0, data[data.length - 1].end_balance * 2]\n  });\n  const zScale = scaleOrdinal({\n    range: [\"#3182bd\", \"#6baed6\", \"#9ecae1\"],\n    // range: [\"green\", \"orange\", \"red\"],\n    domain: keys\n  });\n\n  // Dimensions\n  const width = 600;\n  const height = 450;\n  const margin = { top: 10, bottom: 40, left: 40, right: 10 };\n  const widthTT = 130;\n  const heightTT = 50;\n  const paddingTT = 12;\n\n  // ToolTip\n  const tooltipStyles = {\n    ...defaultStyles,\n    backgroundColor: \"rgba(53,71,125,0.8)\",\n    color: \"white\",\n    width: widthTT,\n    height: heightTT,\n    padding: paddingTT,\n  };\n\n  const {\n    showTooltip,\n    hideTooltip,\n    updateTooltip,\n    tooltipOpen,\n    tooltipData,\n    tooltipLeft = 0,\n    tooltipTop = 0\n  } = useTooltip({\n    // Initial tooltip state\n    tooltipOpen: true,\n    // tooltipLeft: width / 3,\n    // tooltipTop: height / 3,\n    tooltipLeft: -1000,\n    tooltipTop: -1000,\n    tooltipData: \"Move me with your mouse\"\n  });\n  //  Accessors\n  const getDate = (d) => new Date(d.date);\n  // const getDataValue = (d) => d.Group1 + d.Group2 + d.Group3;\n  const getDataValue = (d) => d.start_principal + d.interest + d.start_balance;\n  const bisectDate = bisector(d => new Date(d.date)).left;\n\n  // Scales\n  const xMax = width - margin.left - margin.right;\n  const yMax = height - margin.top - margin.bottom;\n\n  xScale.range([0, xMax]);\n  yScale.range([yMax, 0]);\n\n  return (\n    <div\n      style={{ width, height }}\n      key={Math.random() - value}\n    >\n      <p>{value}</p>\n      <TooltipWithBounds\n        key={Math.random() - value} // needed for bounds to update correctly\n        left={tooltipLeft}\n        top={tooltipTop}\n        style={tooltipStyles}\n      >\n        {tooltipData}\n      </TooltipWithBounds>\n      <svg width={width} height={height}>\n        <Group top={margin.top} left={margin.left} key={Math.random() - value}>\n          <AreaStack\n            key={Math.random() - value}\n            keys={keys}\n            data={data}\n            stroke=\"white\"\n            strokeWidth={2}\n            x={d => xScale(x(d.data))}\n            y0={d => {\n              return yScale(d[0])\n            }}\n            // y1={d => yScale(d[0] + d[1])}\n            y1={d => yScale(d[1])}\n            // color={(key, index) => zScale(keys[index])}\n            color={d => zScale(d)}\n            // Move the ToolTip\n            onMouseMove={(event) => {\n              const { x } = localPoint(event) || { x: 0 };\n              const x0 = xScale.invert(x);\n              const index = bisectDate(data, x0, 1);\n              const d0 = data[index - 1];\n              const d1 = data[index];\n              let d = d0;\n              if (d1 && getDate(d1)) {\n                d = x0.valueOf() - getDate(d0).valueOf() > getDate(d1).valueOf() - x0.valueOf() ? d1 : d0;\n              }\n\n              // info on the tooltip\n              // let information = `G1: ${d.Group1} \\n G2: ${d.Group2} \\n G3: ${d.Group3} \\n Sum: ${d.Group1 + d.Group2 + d.Group3}`;\n              // let information = `G1: ${d.start_principal} \\n G2: ${d.interest} \\n G3: ${d.start_balance} \\n Sum: ${d.start_principal + d.interest + d.start_balance}`;\n              let information = `Principal: ${d.start_principal.toFixed(2)} \\n Interest: ${d.interest.toFixed(2)} \\n Balance: ${d.start_balance.toFixed(2)}`;\n              showTooltip({ tooltipLeft: x, tooltipTop: yScale(getDataValue(d)), tooltipData: information, tooltipOpen: true });\n            }}\n            // Hide the toolTip\n            onMouseLeave={(event) => {\n              showTooltip({ tooltipLeft: -1000, tooltipTop: -1000, tooltipData: \"\", tooltipOpen: true })\n            }}\n          />\n          <Line\n            key={Math.random() - value}\n            from={{ x: tooltipLeft - widthTT / 2, y: margin.top }}\n            to={{ x: tooltipLeft - widthTT / 2, y: margin.top + height }}\n            // stroke={'#75daad'}\n            stroke={'orange'}\n            strokeWidth={2}\n            // pointerEvents=\"none\"\n            strokeDasharray=\"5,2\"\n          />\n          <AxisLeft scale={yScale} key={Math.random() - value} />\n          <AxisBottom top={yMax} scale={xScale} key={Math.random() - value} />\n        </Group>\n      </svg>\n    </div>\n  );\n};\n\nexport default Stacked;\n",["34","35"],"/home/movalle/TODO/proyectos/investment-calculator/src/pie.js",["36","37","38","39","40"],"/home/movalle/TODO/proyectos/investment-calculator/src/logic.js",["41","42"],"const investment_calculator = (initial, years, r, contribution) => {\n  // initial: initial amount of money\n  // years: years in which compounding interest will be calculated\n  // r: yearly interest rate (calculated every month)\n  // contribution: amount to be contributed monthly\n\n  const monthly_r = Math.pow(1 + r, 1 / 12) - 1;\n  let current_date = new Date();\n\n  const investment = [\n    {\n      'year': 1,\n      'month': 1,\n      'date': new Date(current_date.setMonth(current_date.getMonth() + 1)),\n      'start_principal': initial,\n      'start_balance': initial,\n      'interest': initial * monthly_r,\n      'end_principal': initial + contribution,\n      'end_balance': initial + initial * monthly_r + contribution\n    }\n  ]\n\n  let year = 1;\n  let month = 1;\n  const total_months = years * 12;\n\n  for (let i = 0; i < total_months; i++) {\n    if (i == 0) {\n      continue\n    }\n    month += 1;\n    if (i % 12 == 0) {\n      year += 1;\n      month = 1;\n    }\n    investment.push({\n      'year': year,\n      'month': month,\n      'date': new Date(current_date.setMonth(current_date.getMonth() + 1)),\n      'start_principal': investment[i - 1].end_principal,\n      'start_balance': investment[i - 1].end_balance,\n      'interest': investment[i - 1].end_balance * monthly_r,\n      'end_principal': investment[i - 1].end_principal + contribution,\n      'end_balance': investment[i - 1].end_balance\n        + investment[i - 1].end_balance * monthly_r + contribution\n    });\n  }\n  return investment;\n}\n\nexport default investment_calculator;","/home/movalle/TODO/proyectos/investment-calculator/src/App.js",["43","44","45","46","47","48"],"/home/movalle/TODO/proyectos/investment-calculator/src/legend.js",["49","50","51","52","53"],"import {\n  Legend,\n  LegendLinear,\n  LegendQuantile,\n  LegendOrdinal,\n  LegendSize,\n  LegendThreshold,\n  LegendItem,\n  LegendLabel,\n} from '@visx/legend';\nimport { scaleOrdinal } from '@visx/scale';\n\nconst legendGlyphSize = 15;\n\nconst ordinalColorScale = scaleOrdinal({\n  domain: ['Initial Amount', 'Interest Gained', 'Monthly Contributions'],\n  range: [\"#6baed6\", \"#9ecae1\", \"#3182bd\"],\n});\n\nfunction MyChart() {\n  return (\n    <div>\n      <LegendOrdinal scale={ordinalColorScale} labelFormat={label => `${label}`}>\n        {labels => (\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\n            {labels.map((label, i) => (\n              <LegendItem\n                key={`legend-quantile-${i}`}\n                margin=\"0 5px\"\n              // onClick={() => {\n              //   if (events) alert(`clicked: ${JSON.stringify(label)}`);\n              // }}\n              >\n                <svg width={legendGlyphSize} height={legendGlyphSize}>\n                  <rect fill={label.value} width={legendGlyphSize} height={legendGlyphSize} />\n                </svg>\n                <LegendLabel align=\"left\" margin=\"0 0 0 4px\">\n                  {label.text}\n                </LegendLabel>\n              </LegendItem>\n            ))}\n          </div>\n        )}\n      </LegendOrdinal>\n    </div>\n  );\n}\n\nexport default MyChart;",{"ruleId":"54","severity":1,"message":"55","line":1,"column":17,"nodeType":"56","messageId":"57","endLine":1,"endColumn":25},{"ruleId":"54","severity":1,"message":"58","line":56,"column":5,"nodeType":"56","messageId":"57","endLine":56,"endColumn":16},{"ruleId":"54","severity":1,"message":"59","line":57,"column":5,"nodeType":"56","messageId":"57","endLine":57,"endColumn":18},{"ruleId":"54","severity":1,"message":"60","line":58,"column":5,"nodeType":"56","messageId":"57","endLine":58,"endColumn":16},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"54","severity":1,"message":"65","line":22,"column":9,"nodeType":"56","messageId":"57","endLine":22,"endColumn":21},{"ruleId":"54","severity":1,"message":"66","line":23,"column":9,"nodeType":"56","messageId":"57","endLine":23,"endColumn":22},{"ruleId":"54","severity":1,"message":"67","line":24,"column":9,"nodeType":"56","messageId":"57","endLine":24,"endColumn":27},{"ruleId":"54","severity":1,"message":"58","line":65,"column":5,"nodeType":"56","messageId":"57","endLine":65,"endColumn":16},{"ruleId":"54","severity":1,"message":"60","line":67,"column":5,"nodeType":"56","messageId":"57","endLine":67,"endColumn":16},{"ruleId":"68","severity":1,"message":"69","line":28,"column":11,"nodeType":"70","messageId":"71","endLine":28,"endColumn":13},{"ruleId":"68","severity":1,"message":"69","line":32,"column":16,"nodeType":"70","messageId":"71","endLine":32,"endColumn":18},{"ruleId":"54","severity":1,"message":"72","line":8,"column":10,"nodeType":"56","messageId":"57","endLine":8,"endColumn":16},{"ruleId":"54","severity":1,"message":"73","line":8,"column":18,"nodeType":"56","messageId":"57","endLine":8,"endColumn":27},{"ruleId":"54","severity":1,"message":"74","line":9,"column":10,"nodeType":"56","messageId":"57","endLine":9,"endColumn":12},{"ruleId":"54","severity":1,"message":"75","line":9,"column":14,"nodeType":"56","messageId":"57","endLine":9,"endColumn":19},{"ruleId":"54","severity":1,"message":"76","line":10,"column":10,"nodeType":"56","messageId":"57","endLine":10,"endColumn":23},{"ruleId":"54","severity":1,"message":"77","line":10,"column":25,"nodeType":"56","messageId":"57","endLine":10,"endColumn":41},{"ruleId":"54","severity":1,"message":"78","line":2,"column":3,"nodeType":"56","messageId":"57","endLine":2,"endColumn":9},{"ruleId":"54","severity":1,"message":"79","line":3,"column":3,"nodeType":"56","messageId":"57","endLine":3,"endColumn":15},{"ruleId":"54","severity":1,"message":"80","line":4,"column":3,"nodeType":"56","messageId":"57","endLine":4,"endColumn":17},{"ruleId":"54","severity":1,"message":"81","line":6,"column":3,"nodeType":"56","messageId":"57","endLine":6,"endColumn":13},{"ruleId":"54","severity":1,"message":"82","line":7,"column":3,"nodeType":"56","messageId":"57","endLine":7,"endColumn":18},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'hideTooltip' is assigned a value but never used.","'updateTooltip' is assigned a value but never used.","'tooltipOpen' is assigned a value but never used.","no-native-reassign",["83"],"no-negated-in-lhs",["84"],"'name_initial' is assigned a value but never used.","'name_interest' is assigned a value but never used.","'name_contributions' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'fyears' is assigned a value but never used.","'setfyears' is assigned a value but never used.","'fr' is assigned a value but never used.","'setfr' is assigned a value but never used.","'fcontribution' is assigned a value but never used.","'setfcontribution' is assigned a value but never used.","'Legend' is defined but never used.","'LegendLinear' is defined but never used.","'LegendQuantile' is defined but never used.","'LegendSize' is defined but never used.","'LegendThreshold' is defined but never used.","no-global-assign","no-unsafe-negation"]